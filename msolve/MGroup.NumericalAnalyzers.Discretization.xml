<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MGroup.NumericalAnalyzers.Discretization</name>
    </assembly>
    <members>
        <member name="T:MGroup.NumericalAnalyzers.Discretization.NonLinear.ArcLengthAnalyzer">
            <summary>
            This class solves the nonlinear system of equations using the arc length method.
            </summary>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Discretization.NonLinear.ArcLengthAnalyzer.#ctor(MGroup.MSolve.Solution.AlgebraicModel.IAlgebraicModel,MGroup.MSolve.Solution.ISolver,MGroup.MSolve.AnalysisWorkflow.Providers.INonLinearProvider,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            This class solves the linearized geometrically nonlinear system of equations according to the Arc Length incremental-iterative method.
            </summary>
            <param name="algebraicModel">Instance of the algebraic model that will be solved</param>
            <param name="solver">Instance of the solver that will solve the linear system of equations</param>
            <param name="provider">Instance of the problem type to be solved</param>
            <param name="numIncrements">Number of total load increments</param>
            <param name="maxIterationsPerIncrement">Number of maximum iterations within a load increment</param>
            <param name="numIterationsForMatrixRebuild">Number of iterations for the rebuild of the siffness matrix within a load increment</param>
            <param name="residualTolerance">Tolerance for the convergence criterion of the residual forces</param>
            <param name="shape">Option for the shape of the constraint - 0 for cylindrical, 1 for spherical, intermediate values for elliptic (default : shape = 0)</param>
            <param name="constConstraint">Option for constant radius of the constraint (default : constConstraint = 'true')</param>
            <param name="numOfIterations">(only usefull for constConstraint = false) Number of expected iterations within a load increment (default : numOfIterations = 4)</param>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Discretization.NonLinear.ArcLengthAnalyzer.Solve">
            <summary>
            Solves the nonlinear equations and calculates the displacements vector.
            </summary>
        </member>
        <member name="T:MGroup.NumericalAnalyzers.Discretization.NonLinear.DisplacementControlAnalyzer">
            <summary>
            This class solves the nonlinear system of equations using the displacement control method
            </summary>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Discretization.NonLinear.DisplacementControlAnalyzer.#ctor(MGroup.MSolve.Solution.AlgebraicModel.IAlgebraicModel,MGroup.MSolve.Solution.ISolver,MGroup.MSolve.AnalysisWorkflow.Providers.INonLinearProvider,System.Int32,System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            This class solves the linearized geometrically nonlinear system of equations according to displacement control incremental-iterative method.
            This only works if there are no nodal loads or any loading condition other than prescribed displacements.
            </summary>
            <param name="model">Instance of the model that will be solved</param>
            <param name="solver">Instance of the solver that will solve the linear system of equations</param>
            <param name="provider">Instance of the problem type to be solved</param>
            <param name="subdomainUpdaters">Instance that updates constraints, right-hand-side vector, updates and resets state</param>
            <param name="numIncrements">Number of total load increments</param>
            <param name="maxIterationsPerIncrement">Number of maximum iterations within a load increment</param>
            <param name="numIterationsForMatrixRebuild">Number of iterations for the rebuild of the siffness matrix within a load increment</param>
            <param name="residualTolerance">Tolerance for the convergence criterion of the residual forces</param>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Discretization.NonLinear.DisplacementControlAnalyzer.Solve">
            <summary>
            Solves the nonlinear equations and calculates the displacements vector
            </summary>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Discretization.NonLinear.LoadControlAnalyzer.#ctor(MGroup.MSolve.Solution.AlgebraicModel.IAlgebraicModel,MGroup.MSolve.Solution.ISolver,MGroup.MSolve.AnalysisWorkflow.Providers.INonLinearProvider,System.Int32,System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            This class solves the linearized geoemtrically nonlinear system of equations according to Newton-Raphson's load control incremental-iterative method.
            </summary>
            <param name="model">Instance of the model that will be solved</param>
            <param name="solver">Instance of the solver that will solve the linear system of equations</param>
            <param name="provider">Instance of the problem type to be solved</param>
            <param name="subdomainUpdaters">Instance that updates constraints, right-hand-side vector, updates and resets state</param>
            <param name="numIncrements">Number of total load increments</param>
            <param name="maxIterationsPerIncrement">Number of maximum iterations within a load increment</param>
            <param name="numIterationsForMatrixRebuild">Number of iterations for the rebuild of the siffness matrix within a load increment</param>
            <param name="residualTolerance">Tolerance for the convergence criterion of the residual forces</param>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Discretization.NonLinear.LoadControlAnalyzer.Solve">
            <summary>
            Solves the nonlinear equations and calculates the displacements vector.
            </summary>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Discretization.NonLinear.LoadControlAnalyzer2.#ctor(MGroup.MSolve.Solution.AlgebraicModel.IAlgebraicModel,MGroup.MSolve.Solution.ISolver,MGroup.MSolve.AnalysisWorkflow.Providers.INonLinearProvider,System.Int32,System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            This class solves the linearized geoemtrically nonlinear system of equations according to Newton-Raphson's load control incremental-iterative method.
            </summary>
            <param name="model">Instance of the model that will be solved</param>
            <param name="solver">Instance of the solver that will solve the linear system of equations</param>
            <param name="provider">Instance of the problem type to be solved</param>
            <param name="subdomainUpdaters">Instance that updates constraints, right-hand-side vector, updates and resets state</param>
            <param name="numIncrements">Number of total load increments</param>
            <param name="maxIterationsPerIncrement">Number of maximum iterations within a load increment</param>
            <param name="numIterationsForMatrixRebuild">Number of iterations for the rebuild of the siffness matrix within a load increment</param>
            <param name="residualTolerance">Tolerance for the convergence criterion of the residual forces</param>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Discretization.NonLinear.LoadControlAnalyzer2.Solve">
            <summary>
            Solves the nonlinear equations and calculates the displacements vector.
            </summary>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Discretization.NonLinear.LoadControlAnalyzer2Tolerance.#ctor(MGroup.MSolve.Solution.AlgebraicModel.IAlgebraicModel,MGroup.MSolve.Solution.ISolver,MGroup.MSolve.AnalysisWorkflow.Providers.INonLinearProvider,System.Int32,System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            This class solves the linearized geoemtrically nonlinear system of equations according to Newton-Raphson's load control incremental-iterative method.
            </summary>
            <param name="model">Instance of the model that will be solved</param>
            <param name="solver">Instance of the solver that will solve the linear system of equations</param>
            <param name="provider">Instance of the problem type to be solved</param>
            <param name="subdomainUpdaters">Instance that updates constraints, right-hand-side vector, updates and resets state</param>
            <param name="numIncrements">Number of total load increments</param>
            <param name="maxIterationsPerIncrement">Number of maximum iterations within a load increment</param>
            <param name="numIterationsForMatrixRebuild">Number of iterations for the rebuild of the siffness matrix within a load increment</param>
            <param name="residualTolerance">Tolerance for the convergence criterion of the residual forces</param>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Discretization.NonLinear.LoadControlAnalyzer2Tolerance.Solve">
            <summary>
            Solves the nonlinear equations and calculates the displacements vector.
            </summary>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Discretization.NonLinear.LoadControlAnalyzer2ToleranceV3.#ctor(MGroup.MSolve.Solution.AlgebraicModel.IAlgebraicModel,MGroup.MSolve.Solution.ISolver,MGroup.MSolve.AnalysisWorkflow.Providers.INonLinearProvider,System.Int32,System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            This class solves the linearized geoemtrically nonlinear system of equations according to Newton-Raphson's load control incremental-iterative method.
            </summary>
            <param name="model">Instance of the model that will be solved</param>
            <param name="solver">Instance of the solver that will solve the linear system of equations</param>
            <param name="provider">Instance of the problem type to be solved</param>
            <param name="subdomainUpdaters">Instance that updates constraints, right-hand-side vector, updates and resets state</param>
            <param name="numIncrements">Number of total load increments</param>
            <param name="maxIterationsPerIncrement">Number of maximum iterations within a load increment</param>
            <param name="numIterationsForMatrixRebuild">Number of iterations for the rebuild of the siffness matrix within a load increment</param>
            <param name="residualTolerance">Tolerance for the convergence criterion of the residual forces</param>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Discretization.NonLinear.LoadControlAnalyzer2ToleranceV3.Solve">
            <summary>
            Solves the nonlinear equations and calculates the displacements vector.
            </summary>
        </member>
        <member name="F:MGroup.NumericalAnalyzers.Dynamic.GeneralizedAlphaDynamicAnalyzerV3.beta">
            <summary>
            This class makes the appropriate arrangements for the solution of linear dynamic equations
            according to implicit Generalized alpha method
            Authors: George Stavroulakis
            </summary>
        </member>
        <member name="F:MGroup.NumericalAnalyzers.Dynamic.GeneralizedAlphaDynamicAnalyzerV3.gamma">
            <summary>
            This class makes the appropriate arrangements for the solution of linear dynamic equations
            according to implicit Generalized alpha method
            Authors: George Stavroulakis
            </summary>
        </member>
        <member name="F:MGroup.NumericalAnalyzers.Dynamic.GeneralizedAlphaDynamicAnalyzerV3.timeStep">
            <summary>
            This class makes the appropriate arrangements for the solution of linear dynamic equations
            according to implicit Generalized alpha method
            Authors: George Stavroulakis
            </summary>
        </member>
        <member name="F:MGroup.NumericalAnalyzers.Dynamic.GeneralizedAlphaDynamicAnalyzerV3.currentStep">
            <summary>
            This class makes the appropriate arrangements for the solution of linear dynamic equations
            according to implicit Generalized alpha method
            Authors: George Stavroulakis
            </summary>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Dynamic.GeneralizedAlphaDynamicAnalyzerV3.#ctor(MGroup.MSolve.Solution.AlgebraicModel.IAlgebraicModel,MGroup.MSolve.AnalysisWorkflow.Providers.ITransientAnalysisProvider,MGroup.MSolve.AnalysisWorkflow.IChildAnalyzer,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Creates an instance that uses a specific problem type and an appropriate child analyzer for the construction of the system of equations arising from the actual physical problem
            </summary>
            <param name="model">Instance of the model to be solved</param>
            <param name="provider">Instance of the problem type to be solver</param>
            <param name="childAnalyzer">Instance of the child analyzer that will handle the solution of the system of equations</param>
            <param name="timeStep">Instance of the time step of the method that will be initialized</param>
            <param name="totalTime">Instance of the total time of the method that will be initialized</param>
            <param name="alpha">Instance of parameter "alpha" of the method that will be initialized</param>
            <param name="delta">Instance of parameter "delta" of the method that will be initialized</param>
            <param name="currentStep">Starts the analysis from step equal to this parameter</param>
            <param name="calculateInitialDerivativeVectors">Set to false to skip initial condition calculation based on initial values (default is true)</param>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Dynamic.GeneralizedAlphaDynamicAnalyzerV3.BuildMatrices">
            <summary>
            Makes the proper solver-specific initializations before the solution of the linear system of equations. This method MUST be called before the actual solution of the aforementioned system
            </summary>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Dynamic.GeneralizedAlphaDynamicAnalyzerV3.GetOtherRhsComponents(MGroup.MSolve.Solution.LinearSystem.IGlobalVector)">
            <summary>
            Calculates equivalent right-hand side for first- and second-order time derivatives for use in non-linear solvers.
            Returns zero vector if transient analysis phase is TransientAnalysisPhase.InitialConditionEvaluation.
            </summary>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Dynamic.GeneralizedAlphaDynamicAnalyzerV3.Initialize(System.Boolean)">
            <summary>
            Initializes the models, the solvers, child analyzers, builds the matrices, solves for initial values and initializes right-hand-side vectors.
            </summary>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Dynamic.GeneralizedAlphaDynamicAnalyzerV3.Solve">
            <summary>
            Perform the transient analysis by employing the assigned child analyzer for every timestep.
            </summary>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Dynamic.GeneralizedAlphaDynamicAnalyzerV3.CalculateRhsImplicit">
            <summary>
            Calculates the right-hand-side of the implicit dyanmic method. This will be used for the solution of the linear dynamic system.
            </summary>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Dynamic.GeneralizedAlphaDynamicAnalyzerV3.MGroup#MSolve#AnalysisWorkflow#IStepwiseAnalyzer#Solve">
            <summary>
            Solves the linear system of equations of the current timestep
            </summary>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Dynamic.GeneralizedAlphaDynamicAnalyzerV3.Builder.SetNewmarkParameters(System.Double,System.Double,System.Boolean)">
             <summary>
            
             </summary>
             <param name="beta">
             Used in the intepolation between the accelerations of the previous and current time step, in order to obtain the
             current displacements. Also called alpha by Bathe.
             </param>
             <param name="gamma">
             Used in the intepolation between the accelerations of the previous and current time step, in order to obtain the
             current velocities. Also called delta by Bathe.
             </param>
             <param name="allowConditionallyStable">
             If set to true, the user must make sure that the time step chosen is lower than the critical step size
             corresponding to these particular <paramref name="beta"/>, <paramref name="gamma"/> parameters.
             </param>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Dynamic.GeneralizedAlphaDynamicAnalyzerV3.Builder.SetNewmarkParametersForCentralDifferences">
            <summary>
            Central diffences: gamma = 1/2, beta = 0. Newmark results in central diffences, a conditionally stable explicit
            method. To ensure stability, the time step must be &lt;= the critical step size = 2 / w,  where w is the maximum
            natural radian frequency. It would be more efficient to use an explicit dynamic analyzer.
            </summary>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Dynamic.GeneralizedAlphaDynamicAnalyzerV3.Builder.SetNewmarkParametersForConstantAcceleration">
            <summary>
            Constant acceleration (also called average acceleration or trapezoid rule): gamma = 1/2, beta = 1/4.
            This is the most common scheme and is unconditionally stable. In this analyzer, it is used as the default.
            </summary>
        </member>
        <member name="M:MGroup.NumericalAnalyzers.Dynamic.GeneralizedAlphaDynamicAnalyzerV3.Builder.SetNewmarkParametersForLinearAcceleration">
            <summary>
            Linear acceleration: gamma = 1/2, beta = 1/6. This is more accurate than the default constant acceleration,
            but it conditionally stable. To ensure stability, the time step must be &lt;= the critical step size = 3.464 / w
            = 0.551 * T, where w is the maximum natural radian frequency and T is the minimum natural period.
            </summary>
        </member>
    </members>
</doc>
